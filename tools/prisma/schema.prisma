generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Provider {
  email
  github
  google
  openid
}

enum Visibility {
  public
  private
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum SubscriptionStatus {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum PaymentProvider {
  STRIPE
  RAZORPAY
  PAYPAL
}

// Community Post Types
enum PostType {
  FEATURE_REQUEST
  BUG_REPORT
  DISCUSSION
  ANNOUNCEMENT
}

model User {
  id               String   @id @default(cuid())
  name             String
  picture          String?
  username         String   @unique
  email            String   @unique
  locale           String   @default("en-US")
  emailVerified    Boolean  @default(false)
  twoFactorEnabled Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  provider         Provider
  secrets          Secrets?
  resumes          Resume[]
  applications JobApplication[]
  mockTests        MockTest[]
  role             Role      @default(USER)
  subscription     Subscription?
  stripeCustomerId String?  @unique
  razorpayCustomerId String?  @unique
  paypalCustomerId String?  @unique
  subscriptionStatus SubscriptionStatus @default(FREE)
  subscriptionEndDate DateTime?
  payments           Payment[]
  posts     CommunityPost[]
  comments  Comment[]
}

model Secrets {
  id                   String   @id @default(cuid())
  password             String?
  lastSignedIn         DateTime @default(now())
  verificationToken    String?
  twoFactorSecret      String?
  twoFactorBackupCodes String[] @default([])
  refreshToken         String?
  resetToken           String?  @unique
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
}

model Resume {
  id         String      @id @default(cuid())
  title      String
  slug       String
  data       Json        @default("{}")
  visibility Visibility  @default(private)
  locked     Boolean     @default(false)
  statistics Statistics?
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  applications JobApplication[]

  @@unique([userId, id])
  @@unique([userId, slug])
  @@index(fields: [userId])
}

model Statistics {
  id        String   @id @default(cuid())
  views     Int      @default(0)
  downloads Int      @default(0)
  resumeId  String   @unique
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([resumeId, id])
}

model Job {
  id          String   @id @default(cuid())
  title       String
  company     String
  location    String?
  type        String?
  salary      String?
  url         String?  @unique
  description String?
  atsKeywords Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  // Optional field to track who created the job
  applications JobApplication[]

  @@index([url])
}

model JobApplication {
  id        String   @id @default(cuid())
  jobId     String
  userId    String
  resumeId  String?
  status    String   @default("draft")
  notes     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resume    Resume?  @relation(fields: [resumeId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([jobId])
  @@index([resumeId])
}

model MockTest {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  score       Int
  totalQuestions Int
  category    String   // e.g., "Technical", "Behavioral", "System Design"
  difficulty  String   // e.g., "Easy", "Medium", "Hard"
  duration    Int      // in minutes
  answers     Json     // Store detailed answers and feedback
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Subscription {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId              String
  status              SubscriptionStatus
  provider            PaymentProvider
  startDate           DateTime @default(now())
  endDate             DateTime?

  // Payment provider specific IDs
  stripeSubscriptionId  String?  @unique
  stripePriceId         String?
  razorpaySubId         String?  @unique
  razorpayPlanId        String?
  paypalSubId           String?  @unique
  paypalPlanId          String?

  payments              Payment[]
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([userId])
}

model Payment {
  id            String          @id @default(cuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionId String?
  subscription   Subscription?  @relation(fields: [subscriptionId], references: [id])
  amount        Float
  currency      String
  provider      PaymentProvider
  status        String
  providerId    String          @unique  // Payment ID from provider
  metadata      Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([userId])
  @@index([subscriptionId])
}

// Community Post Model
model CommunityPost {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  type      PostType
  status    String   @default("open") // open, closed, in-progress
  votes     Int      @default(0)

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  comments  Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// Comments on Community Posts
model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text

  // Relations
  postId    String
  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([userId])
}

