# In this Docker Compose example, it assumes that you maintain a reverse proxy externally (or chose not to).
# The only two exposed ports here are from minio (:9000) and the app itself (:3000).
# If these ports are changed, ensure that the env vars passed to the app are also changed accordingly.

services:
  # Storage (for image uploads)
  minio:
    image: minio/minio:latest
    restart: unless-stopped
    command: server /data --console-address ":9001"
    ports:
      - "${STORAGE_PORT:-9000}:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${STORAGE_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${STORAGE_SECRET_KEY:-minioadmin}
      TZ: ${TZ:-UTC}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO initialization
  minio-init:
    image: alpine:latest
    depends_on:
      minio:
        condition: service_healthy
    command: >
      /bin/sh -c '
      echo "Starting MinIO initialization..." &&
      apk add --no-cache curl &&
      sleep 10 &&
      echo "Downloading MinIO client..." &&
      curl -sSL https://dl.min.io/client/mc/release/linux-amd64/mc -o /usr/local/bin/mc &&
      chmod +x /usr/local/bin/mc &&
      echo "Setting up MinIO alias..." &&
      mc alias set myminio http://minio:9000 ${STORAGE_ACCESS_KEY:-minioadmin} ${STORAGE_SECRET_KEY:-minioadmin} &&
      echo "Creating default bucket..." &&
      mc mb myminio/default || true &&
      echo "Setting bucket policies..." &&
      mc policy set public myminio/default &&
      mc policy set download myminio/default &&
      echo "Creating public-read policy..." &&
      mc admin policy add myminio public-read-policy "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"*\"]},\"Action\":[\"s3:GetObject\",\"s3:ListBucket\"],\"Resource\":[\"arn:aws:s3:::default/*\",\"arn:aws:s3:::default\"]}]}" &&
      echo "Applying public-read policy..." &&
      mc admin policy set myminio public-read-policy user=${STORAGE_ACCESS_KEY:-minioadmin} &&
      echo "Setting bucket policy..." &&
      mc admin policy add myminio bucket-policy "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"*\"]},\"Action\":[\"s3:GetObject\",\"s3:ListBucket\"],\"Resource\":[\"arn:aws:s3:::default/*\",\"arn:aws:s3:::default\"]}]}" &&
      mc admin policy set myminio bucket-policy user=${STORAGE_ACCESS_KEY:-minioadmin} &&
      echo "Verifying bucket creation..." &&
      mc ls myminio/default &&
      echo "MinIO initialization completed."
      '
    environment:
      MINIO_ROOT_USER: ${STORAGE_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${STORAGE_SECRET_KEY:-minioadmin}

  # Chrome Browser (for printing and previews)
  chrome:
    image: ghcr.io/browserless/chromium:latest
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      HEALTH: "true"
      TOKEN: ${CHROME_TOKEN}
      PROXY_HOST: "chrome"
      PROXY_PORT: 3000
      PROXY_SSL: "false"

  app:
    build:
      context: .
      dockerfile: Dockerfile.rx
      args:
        - NX_CLOUD_ACCESS_TOKEN=${NX_CLOUD_ACCESS_TOKEN}
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    depends_on:
      minio:
        condition: service_healthy
      chrome:
        condition: service_started
    environment:
      # Core settings
      PORT: ${PORT:-3000}
      NODE_ENV: ${NODE_ENV:-production}
      TZ: ${TZ:-UTC}

      # URLs
      PUBLIC_URL: ${PUBLIC_URL:-http://localhost:3000}
      VITE_APP_URL: ${VITE_APP_URL:-http://localhost:3000}
      STORAGE_URL: ${STORAGE_URL:-http://localhost:9000/default}
      API_URL: ${API_URL}

      # Database (Supabase)
      DATABASE_URL: ${DATABASE_URL}
      DIRECT_URL: ${DIRECT_URL}

      # Authentication
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}

      # Chrome/Puppeteer
      CHROME_TOKEN: ${CHROME_TOKEN}
      CHROME_URL: "ws://chrome:3000"
      CHROME_IGNORE_HTTPS_ERRORS: ${CHROME_IGNORE_HTTPS_ERRORS:-true}
      CHROME_MAX_RETRIES: ${CHROME_MAX_RETRIES:-10}
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: ${PUPPETEER_SKIP_CHROMIUM_DOWNLOAD:-true}
      PUPPETEER_EXECUTABLE_PATH: ${PUPPETEER_EXECUTABLE_PATH:-/usr/bin/chromium}

      # Storage
      STORAGE_ENDPOINT: minio
      STORAGE_PORT: 9000
      STORAGE_REGION: ${STORAGE_REGION:-us-east-1}
      STORAGE_BUCKET: ${STORAGE_BUCKET:-default}
      STORAGE_ACCESS_KEY: ${STORAGE_ACCESS_KEY:-minioadmin}
      STORAGE_SECRET_KEY: ${STORAGE_SECRET_KEY:-minioadmin}
      STORAGE_USE_SSL: ${STORAGE_USE_SSL:-false}
      STORAGE_SKIP_BUCKET_CHECK: ${STORAGE_SKIP_BUCKET_CHECK:-false}

      # Mail
      MAIL_FROM: ${MAIL_FROM:-noreply@localhost}
      SMTP_URL: ${SMTP_URL}

      # OpenAI
      OPENAI_BASE_URL: ${OPENAI_BASE_URL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL}
      OPENAI_MAX_TOKENS: ${OPENAI_MAX_TOKENS}

      # Adzuna
      ADZUNA_APP_ID: ${ADZUNA_APP_ID}
      ADZUNA_API_KEY: ${ADZUNA_API_KEY}
      ADZUNA_API_BASE_URL: ${ADZUNA_API_BASE_URL}

      # Payment Gateways
      RAZORPAY_KEY_ID: ${RAZORPAY_KEY_ID}
      RAZORPAY_KEY_SECRET: ${RAZORPAY_KEY_SECRET}
      PAYU_MERCHANT_KEY: ${PAYU_MERCHANT_KEY}
      PAYU_MERCHANT_SALT: ${PAYU_MERCHANT_SALT}

      # OAuth
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GITHUB_CALLBACK_URL: ${GITHUB_CALLBACK_URL}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_CALLBACK_URL: ${GOOGLE_CALLBACK_URL}

volumes:
  minio_data: